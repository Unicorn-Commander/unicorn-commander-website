server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CORS headers for external access
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "*" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle client-side routing (SPA)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Aggressive cache busting for HTML files
        add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0, private";
        add_header Pragma "no-cache";
        add_header Expires "0";
        add_header Last-Modified $date_gmt;
        add_header ETag "";
        add_header Vary "*";
        if_modified_since off;
        expires off;
        etag off;
    }
    
    # Specific handling for index.html to ensure it's never cached
    location = /index.html {
        add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0, private";
        add_header Pragma "no-cache";
        add_header Expires "0";
        add_header Last-Modified $date_gmt;
        add_header ETag "";
        add_header Vary "*";
        if_modified_since off;
        expires off;
        etag off;
    }
    
    # Service worker must never be cached
    location = /service-worker.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0, private";
        add_header Pragma "no-cache";
        add_header Expires "0";
        add_header Service-Worker-Allowed "/";
        etag off;
    }

    # Redirect old cached assets to force refresh
    location ~* /assets/index-.*\.(js|css)$ {
        try_files $uri @refresh_cache;
    }
    
    location @refresh_cache {
        add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0, private";
        return 302 /?v=$request_time;
    }

    # Cache static assets aggressively (but only current ones)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # CORS for web fonts
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin "*";
        }
    }

    # Handle image files (already covered in static assets above)
    # WebP files are served by the general static assets location

    # API routes (if needed for future backend integration)
    location /api/ {
        # Placeholder for future API proxy
        return 404;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /index.html;
}